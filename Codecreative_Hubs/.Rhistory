library(readxl)
library(tidyverse)
library(caret)
library(plotROC)
library(rpart)
library(rattle)
library(ggplot2)
library(rpart.plot)
library(rattle)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
d <- read_excel("data.xls")[,-1]
dim(d)
D <- d %>% select(-c(buy_other,consumption_other,immediate_consumption,
product_char1,product_char2,
product_char3,product_char4,
product_char5,product_char6,
product_char7,product_char8,
product_char9)) %>% na.omit()
dim(D)
D[, 1:27] <- lapply(D[, 1:27], as.factor)
set.seed(1)
d_idx = createDataPartition(D$reg_RTE_salad, p = 0.70, list = FALSE)
train = D[d_idx, ]
test = D[-d_idx, ]
full.model <- glm(reg_RTE_salad~gender+
age3+income+seniority+hh_size+knowledge_I+
fitness+howlearn_adv+howlearn_social+buy_supermarket+buy_convenience_store
+consumption_lunch_box+
consumption_snacking+SN_I,
data = train, family = binomial(link="logit"))
#full.model <- glm(reg_RTE_salad~.,
#                  data = train, family = binomial(link="logit"))
summary(full.model)
predicted_full = as.factor(ifelse(predict(full.model, newdata = test,type = "response")> 0.5, "1", "0"))
cmLogit_full <-confusionMatrix(predicted_full, test$reg_RTE_salad)
print(cmLogit_full)
ioRoc <- data.frame(pred=as.numeric(predicted_full),obs=as.numeric(test$reg_RTE_salad))
basicplot <- ggplot(ioRoc, aes(d = pred, m =obs)) + geom_roc()
basicplot + labs(title="LOGIT",
x ="False Positive Rate", y = "True Positive Rate")+
annotate("text", x = .60, y = .55,
label = paste("AUC =", round(calc_auc(basicplot)$AUC, 2))) +
scale_x_continuous("1 - Specificity", breaks = seq(0, 1, by = .1))
set.seed(50)
tuning = expand.grid(unit=round(runif(3, min = 0, max = 50 )))
tuning = cbind(tuning, performance = rep(0, nrow(tuning)))
tuning
for (g in  1:(nrow(tuning))) {
set.seed(123)
RF = train(reg_RTE_salad ~ .,
data=train,
method="nnet",
trControl = trainControl(method='repeatedcv',
number=tuning$unit[g],
repeats=5,
search = 'random'))
# PREDICTION
predicted_RF = predict(RF, newdata = test)
cmRF <-confusionMatrix(predicted_RF, test$reg_RTE_salad)
print(cmRF)
tuning$performance[g] = cmRF$overall[1]
View(tuning)
}
tuning
tuning = expand.grid(unit=round(runif(3, min = 0, max = 100 )))
tuning = cbind(tuning, performance = rep(0, nrow(tuning)))
for (g in  1:(nrow(tuning))) {
set.seed(123)
RF = train(reg_RTE_salad ~ .,
data=train,
method="nnet",
trControl = trainControl(method='repeatedcv',
number=tuning$unit[g],
repeats=5,
search = 'random'))
# PREDICTION
predicted_RF = predict(RF, newdata = test)
cmRF <-confusionMatrix(predicted_RF, test$reg_RTE_salad)
print(cmRF)
tuning$performance[g] = cmRF$overall[1]
View(tuning)
}
RF = train(reg_RTE_salad ~ .,
data=train,
method="nnet",
trControl = trainControl(method='repeatedcv',
number=1#tuning$unit[g],
repeats=5,
RF = train(reg_RTE_salad ~ .,
data=train,
method="nnet",
trControl = trainControl(method='repeatedcv',
number=1#tuning$unit[g],
repeats=5,
RF = train(reg_RTE_salad ~ .,
data=train,
method="nnet",
trControl = trainControl(method='repeatedcv',
number=1#tuning$unit[g],
repeats=5,
RF = train(reg_RTE_salad ~ .,
data=train,
method="nnet",
trControl = trainControl(method='repeatedcv',
number=1,#tuning$unit[g],
repeats=5,
search = 'random'))
warnings()
RF
# PREDICTION
predicted_RF = predict(RF, newdata = test)
predicted_RF
cmRF <-confusionMatrix(predicted_RF, test$reg_RTE_salad)
print(cmRF)
cmRF$overall[1]
RF = train(reg_RTE_salad ~ .,
data=train,
method="nnet",
trControl = trainControl(method='repeatedcv',
number=100,#tuning$unit[g],
repeats=5,
search = 'random'))
# PREDICTION
predicted_RF = predict(RF, newdata = test)
cmRF <-confusionMatrix(predicted_RF, test$reg_RTE_salad)
cmRF$overall[1]
tuning = expand.grid(unit=round(runif(3, min = 0, max = 100 )))
tuning = cbind(tuning, performance = rep(0, nrow(tuning)))
tuning
tuning$unit[g]
for (g in  1:(nrow(tuning))) {
RF = train(reg_RTE_salad ~ .,
data=train,
method="nnet",
trControl = trainControl(method='repeatedcv',
number=tuning$unit[g],
repeats=5,
search = 'random'))
# PREDICTION
predicted_RF = predict(RF, newdata = test)
cmRF <-confusionMatrix(predicted_RF, test$reg_RTE_salad)
print(cmRF)
tuning$performance[g] = cmRF$overall[1]
View(tuning)
}
library(readxl)
library(tidyverse)
library(caret)
library(plotROC)
library(rpart)
library(rattle)
library(ggplot2)
library(rpart.plot)
library(rattle)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
d <- read_excel("data.xls")[,-1]
dim(d)
#d$age3[d$age3==5] <-
D <- d %>% select(-c(buy_other,consumption_other,immediate_consumption,
product_char1,product_char2,
product_char3,product_char4,
product_char5,product_char6,
product_char7,product_char8,
product_char9)) %>% na.omit()
dim(D)
D[, 1:27] <- lapply(D[, 1:27], as.factor)
save(D,file = "D.RData")
load("D.RData")
head(D)
set.seed(1)
d_idx = createDataPartition(D$reg_RTE_salad, p = 0.70, list = FALSE)
train = D[d_idx, ]
test = D[-d_idx, ]
library(readxl)
library(tidyverse)
library(caret)
library(plotROC)
library(rpart)
library(rattle)
library(ggplot2)
library(rpart.plot)
library(rattle)
load("D.RData")
head(D)
set.seed(1)
d_idx = createDataPartition(D$reg_RTE_salad, p = 0.70, list = FALSE)
train = D[d_idx, ]
test = D[-d_idx, ]
# Logit
full.model <- glm(reg_RTE_salad~gender+age3+income+seniority+hh_size+knowledge_I+
fitness+howlearn_adv+howlearn_social+buy_supermarket+buy_convenience_store+
consumption_lunch_box+consumption_snacking+SN_I,
data = train, family = binomial(link="logit"))
summary(full.model)
predicted_full = as.factor(ifelse(predict(full.model, newdata = test,type = "response")> 0.5, "1", "0"))
cmLogit_full <-confusionMatrix(predicted_full, test$reg_RTE_salad)
print(cmLogit_full)
ioRoc <- data.frame(pred=as.numeric(predicted_full),obs=as.numeric(test$reg_RTE_salad))
basicplot <- ggplot(ioRoc, aes(d = pred, m =obs)) + geom_roc()
basicplot + labs(title="LOGIT",
x ="False Positive Rate", y = "True Positive Rate")+
annotate("text", x = .60, y = .55,
label = paste("AUC =", round(calc_auc(basicplot)$AUC, 2))) +
scale_x_continuous("1 - Specificity", breaks = seq(0, 1, by = .1))
# NNET tuning
set.seed(50)
tuning = expand.grid(unit=round(runif(3, min = 0, max = 100 )))
tuning = cbind(tuning, performance = rep(0, nrow(tuning)))
tuning
# NNET tuning
#set.seed(50)
tuning = expand.grid(unit=round(runif(3, min = 0, max = 100 )))
tuning = cbind(tuning, performance = rep(0, nrow(tuning)))
for (g in  1:(nrow(tuning))) {
NN = train(reg_RTE_salad ~ .,
data=train,
method="nnet",#"svmLinear",
trControl = trainControl(method='repeatedcv',
number=tuning$unit[g],
repeats=5,
search = 'random'))
# PREDICTION
predicted_NN = predict(NN, newdata = test)
cmNN <-confusionMatrix(predicted_NN, test$reg_RTE_salad)
print(cmNN)
tuning$performance[g] = cmRF$overall[1]
View(tuning)
}
# NNET tuning
#set.seed(50)
tuning = expand.grid(unit=round(runif(3, min = 0, max = 100 )))
tuning = cbind(tuning, performance = rep(0, nrow(tuning)))
for (g in  1:(nrow(tuning))) {
NN = train(reg_RTE_salad ~ .,
data=train,
method="nnet",#"svmLinear",
trControl = trainControl(method='repeatedcv',
number=tuning$unit[g],
repeats=5,
search = 'random'))
# PREDICTION
predicted_NN = predict(NN, newdata = test)
cmNN <-confusionMatrix(predicted_NN, test$reg_RTE_salad)
print(cmNN)
tuning$performance[g] = cmNNoverall[1]
View(tuning)
}
# NNET tuning
#set.seed(50)
tuning = expand.grid(unit=round(runif(1, min = 0, max = 100 )))
tuning = cbind(tuning, performance = rep(0, nrow(tuning)))
for (g in  1:(nrow(tuning))) {
NN = train(reg_RTE_salad ~ .,
data=train,
method="nnet",#"svmLinear",
trControl = trainControl(method='repeatedcv',
number=tuning$unit[g],
repeats=5,
search = 'random'))
# PREDICTION
predicted_NN = predict(NN, newdata = test)
cmNN <-confusionMatrix(predicted_NN, test$reg_RTE_salad)
print(cmNN)
tuning$performance[g] = cmNN$overall[1]
View(tuning)
}
# NNET tuning
#set.seed(50)
tuning = expand.grid(unit=round(runif(2, min = 0, max = 100 )))
tuning = cbind(tuning, performance = rep(0, nrow(tuning)))
for (g in  1:(nrow(tuning))) {
NN = train(reg_RTE_salad ~ .,
data=train,
method="nnet",#"svmLinear",
trControl = trainControl(method='repeatedcv',
number=tuning$unit[g],
repeats=5,
search = 'random'))
# PREDICTION
predicted_NN = predict(NN, newdata = test)
cmNN <-confusionMatrix(predicted_NN, test$reg_RTE_salad)
print(cmNN)
tuning$performance[g] = cmNN$overall[1]
View(tuning)
}
# NNET tuning
set.seed(50)
tuning = expand.grid(unit=round(runif(3, min = 0, max = 100 )))
tuning
# NNET tuning
set.seed(55)
tuning = expand.grid(unit=round(runif(3, min = 0, max = 100 )))
tuning
